{
	"name": "df_transform_testing",
	"properties": {
		"description": "Transform the testing data",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_testing",
						"type": "DatasetReference"
					},
					"name": "TestingSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountrySource"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "DimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_testing",
						"type": "DatasetReference"
					},
					"name": "TestingSink"
				}
			],
			"transformations": [
				{
					"name": "SelectReqFields"
				},
				{
					"name": "AggregateDimDate"
				},
				{
					"name": "LookupCountry"
				},
				{
					"name": "SelectReqFieldsFrmLookUp"
				},
				{
					"name": "JoinWithDate"
				},
				{
					"name": "SelectReqFieldsFromJoin"
				}
			],
			"script": "source(output(\n\t\tcountry as string,\n\t\tcountry_code as string,\n\t\tyear_week as string,\n\t\tnew_cases as integer,\n\t\ttests_done as integer,\n\t\tpopulation as integer,\n\t\ttesting_rate as double,\n\t\tpositivity_rate as double,\n\t\ttesting_data_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> TestingSource\nsource(output(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tcontinent as string,\n\t\tpopulation as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CountrySource\nsource(output(\n\t\tdate_key as string,\n\t\tdate as date,\n\t\tyear as string,\n\t\tmonth as short,\n\t\tday as short,\n\t\tday_name as string,\n\t\tday_of_year as short,\n\t\tweek_of_month as short,\n\t\tweek_of_year as string,\n\t\tmonth_name as string,\n\t\tyear_month as integer,\n\t\tyear_week as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DimDateSource\nTestingSource select(mapColumn(\n\t\tcountry,\n\t\tcountry_code,\n\t\tyear_week,\n\t\tnew_cases,\n\t\ttests_done,\n\t\tpopulation,\n\t\ttesting_rate,\n\t\tpositivity_rate,\n\t\ttesting_data_source\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFields\nDimDateSource aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),\n\tweek_start_date = min(date),\n\t\tweek_end_date = max(date)) ~> AggregateDimDate\nSelectReqFields, CountrySource lookup(country_code == country_code_2_digit,\n\tmultiple: false,\n\tpickup: 'any',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tcountry = SelectReqFields@country,\n\t\tcc_2_digit = country_code_2_digit,\n\t\tcc_3_digit = country_code_3_digit,\n\t\tyear_week,\n\t\tnew_cases,\n\t\ttests_done,\n\t\tpopulation = SelectReqFields@population,\n\t\ttesting_rate,\n\t\tpositivity_rate,\n\t\ttesting_data_source\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFieldsFrmLookUp\nSelectReqFieldsFrmLookUp, AggregateDimDate join(year_week == ecdc_year_week,\n\tjoinType:'inner',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> JoinWithDate\nJoinWithDate select(mapColumn(\n\t\tcountry,\n\t\tcc_2_digit,\n\t\tcc_3_digit,\n\t\tyear_week,\n\t\tweek_start_date,\n\t\tweek_end_date,\n\t\tnew_cases,\n\t\ttests_done,\n\t\tpopulation,\n\t\ttesting_rate,\n\t\tpositivity_rate,\n\t\ttesting_data_source\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFieldsFromJoin\nSelectReqFieldsFromJoin sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tpopulation as string,\n\t\t{confirmed cases_count} as string,\n\t\tdeaths_count as string,\n\t\treported_date as string,\n\t\tsource as string\n\t),\n\tpartitionFileNames:['testing.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TestingSink"
		}
	}
}