{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "covid19AnalyticsADF1"
		},
		"tr_start_copy_process_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/3ceb2155-dd29-4741-8520-aed8ee3f4763/resourceGroups/pacificpgkRG/providers/Microsoft.Storage/storageAccounts/covid19reportingstoac"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_population_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "vl_input_file_exist",
						"description": "Check if input file exists",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_population_raw_gz",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:00:30",
							"sleep": 10
						}
					},
					{
						"name": "gm_col_details",
						"description": "Get number of column details",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "vl_input_file_exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:00:10",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_population_raw_gz",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"exists",
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Check if column number match",
						"description": "Verify if the column number matches",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "gm_col_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('gm_col_details').output.columnCount, 13)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "wb_get_web_details",
									"description": "Get dummy web details to throw an error",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:00:05",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prashantgkoti.com",
										"method": "GET",
										"headers": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy Population Data",
									"description": "Copy data from Blob storage to Data Lake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_population_raw_gz",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_population_raw_tsv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "del_input_file",
									"description": "Delete input file after copying it",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Population Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:00:10",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_population_raw_gz",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-26T14:25:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_cases_deaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_cases_deaths",
								"type": "DatasetReference"
							},
							"name": "CasesAndDeathSources"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "SelectCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_cases_and_deaths",
								"type": "DatasetReference"
							},
							"name": "CasesAndDeathsSink"
						}
					],
					"transformations": [
						{
							"name": "FilterEuroOnly"
						},
						{
							"name": "SelectOnlyReqFields"
						},
						{
							"name": "PivotCounts"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectReqFieldsFrmLookup"
						}
					],
					"script": "source(output(\n\t\tcountry as string,\n\t\tcountry_code as string,\n\t\tcontinent as string,\n\t\tpopulation as integer,\n\t\tindicator as string,\n\t\tdaily_count as short,\n\t\tdate as date,\n\t\trate_14_day as double,\n\t\tsource as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CasesAndDeathSources\nsource(output(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tcontinent as string,\n\t\tpopulation as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SelectCountry\nCasesAndDeathSources filter(continent == 'Europe' && not(isNull(country_code))) ~> FilterEuroOnly\nFilterEuroOnly select(mapColumn(\n\t\tcountry,\n\t\tcountry_code,\n\t\tpopulation,\n\t\tindicator,\n\t\tdaily_count,\n\t\tsource,\n\t\teach(match(name=='date'),\n\t\t\t'reported'+'_date' = $$)\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> SelectOnlyReqFields\nSelectOnlyReqFields pivot(groupBy(country,\n\t\tcountry_code,\n\t\tpopulation,\n\t\tsource,\n\t\treported_date,\n\t\tcountry_special = country+', '+country_code),\n\tpivotBy(indicator, ['confirmed cases', 'deaths']),\n\tcount = sum(daily_count),\n\tcolumnNaming: '$V_$N',\n\tlateral: true) ~> PivotCounts\nPivotCounts, SelectCountry lookup(PivotCounts@country == SelectCountry@country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tcountry = PivotCounts@country,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation = PivotCounts@population,\n\t\t{confirmed cases_count},\n\t\tdeaths_count,\n\t\treported_date,\n\t\tsource\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFieldsFrmLookup\nSelectReqFieldsFrmLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['cases_and_deaths.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> CasesAndDeathsSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_hospital_admission",
								"type": "DatasetReference"
							},
							"name": "HospitalAdmissionSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountrySource"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_date_lookup",
								"type": "DatasetReference"
							},
							"name": "DimDateSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_admissions_weekly",
								"type": "DatasetReference"
							},
							"name": "WeeklySink"
						},
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_admissions_daily",
								"type": "DatasetReference"
							},
							"name": "DailySink"
						}
					],
					"transformations": [
						{
							"name": "SelectReqFields"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectReqFieldFrmLookup"
						},
						{
							"name": "SplitDailyFromWeekly"
						},
						{
							"name": "AggregateDimDate"
						},
						{
							"name": "JoinWithDate"
						},
						{
							"name": "PivotWeekly"
						},
						{
							"name": "PivotDaily"
						},
						{
							"name": "SortWeekly"
						},
						{
							"name": "SortDaily"
						},
						{
							"name": "SelectWeekly"
						},
						{
							"name": "SelectDaily"
						}
					],
					"script": "source(output(\n\t\tcountry as string,\n\t\tindicator as string,\n\t\tdate as date,\n\t\tyear_week as string,\n\t\tvalue as double,\n\t\tsource as string,\n\t\turl as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> HospitalAdmissionSource\nsource(output(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tcontinent as string,\n\t\tpopulation as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CountrySource\nsource(output(\n\t\tdate_key as string,\n\t\tdate as date,\n\t\tyear as string,\n\t\tmonth as short,\n\t\tday as short,\n\t\tday_name as string,\n\t\tday_of_year as short,\n\t\tweek_of_month as short,\n\t\tweek_of_year as string,\n\t\tmonth_name as string,\n\t\tyear_month as integer,\n\t\tyear_week as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DimDateSource\nHospitalAdmissionSource select(mapColumn(\n\t\tcountry,\n\t\tindicator,\n\t\tvalue,\n\t\tsource,\n\t\teach(match(name=='date'),\n\t\t\t'reported_'+'date' = $$),\n\t\teach(match(name=='year_week'),\n\t\t\t'reported_'+'year_week' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFields\nSelectReqFields, CountrySource lookup(SelectReqFields@country == CountrySource@country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tcountry = SelectReqFields@country,\n\t\tindicator,\n\t\treported_date,\n\t\treported_year_week,\n\t\tvalue,\n\t\tsource,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFieldFrmLookup\nSelectReqFieldFrmLookup split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',\n\tdisjoint: false) ~> SplitDailyFromWeekly@(Weekly, Daily)\nDimDateSource aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),\n\tweek_start_date = min(date),\n\t\tweek_end_date = max(date)) ~> AggregateDimDate\nSplitDailyFromWeekly@Weekly, AggregateDimDate join(reported_year_week == ecdc_year_week,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinWithDate\nJoinWithDate pivot(groupBy(country,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\treported_year_week,\n\t\tweek_start_date,\n\t\tweek_end_date,\n\t\tsource),\n\tpivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),\n\tcount = sum(value),\n\tcolumnNaming: '$V_$N',\n\tlateral: true) ~> PivotWeekly\nSplitDailyFromWeekly@Daily pivot(groupBy(country,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\treported_year_week,\n\t\tsource),\n\tpivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),\n\tcount = sum(value),\n\tcolumnNaming: '$V_$N',\n\tlateral: true) ~> PivotDaily\nPivotWeekly sort(desc(reported_year_week, true),\n\tasc(country, true),\n\tpartitionBy('hash', 1)) ~> SortWeekly\nPivotDaily sort(desc(reported_year_week, true),\n\tasc(country, true),\n\tpartitionBy('hash', 1)) ~> SortDaily\nSortWeekly select(mapColumn(\n\t\tcountry,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\treported_year_week,\n\t\tweek_start_date,\n\t\tweek_end_date,\n\t\tsource,\n\t\tnew_hospital_admission = {Weekly new hospital admissions per 100k_count},\n\t\tnew_icu_admissions = {Weekly new ICU admissions per 100k_count}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectWeekly\nSortDaily select(mapColumn(\n\t\tcountry,\n\t\tcountry_code_2_digit,\n\t\tcountry_code_3_digit,\n\t\tpopulation,\n\t\treported_year_week,\n\t\tsource,\n\t\tnew_hospitalisation_count = {Daily hospital occupancy_count},\n\t\tnew_icu_count = {Daily ICU occupancy_count}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDaily\nSelectWeekly sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['hospital_admissions_weekly.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WeeklySink\nSelectDaily sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['hospital_admissions_daily.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> DailySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_testing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transform the testing data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_testing",
								"type": "DatasetReference"
							},
							"name": "TestingSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountrySource"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_date_lookup",
								"type": "DatasetReference"
							},
							"name": "DimDateSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_testing",
								"type": "DatasetReference"
							},
							"name": "TestingSink"
						}
					],
					"transformations": [
						{
							"name": "SelectReqFields"
						},
						{
							"name": "AggregateDimDate"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectReqFieldsFrmLookUp"
						},
						{
							"name": "JoinWithDate"
						},
						{
							"name": "SelectReqFieldsFromJoin"
						}
					],
					"script": "source(output(\n\t\tcountry as string,\n\t\tcountry_code as string,\n\t\tyear_week as string,\n\t\tnew_cases as integer,\n\t\ttests_done as integer,\n\t\tpopulation as integer,\n\t\ttesting_rate as double,\n\t\tpositivity_rate as double,\n\t\ttesting_data_source as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> TestingSource\nsource(output(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tcontinent as string,\n\t\tpopulation as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CountrySource\nsource(output(\n\t\tdate_key as string,\n\t\tdate as date,\n\t\tyear as string,\n\t\tmonth as short,\n\t\tday as short,\n\t\tday_name as string,\n\t\tday_of_year as short,\n\t\tweek_of_month as short,\n\t\tweek_of_year as string,\n\t\tmonth_name as string,\n\t\tyear_month as integer,\n\t\tyear_week as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DimDateSource\nTestingSource select(mapColumn(\n\t\tcountry,\n\t\tcountry_code,\n\t\tyear_week,\n\t\tnew_cases,\n\t\ttests_done,\n\t\tpopulation,\n\t\ttesting_rate,\n\t\tpositivity_rate,\n\t\ttesting_data_source\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFields\nDimDateSource aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),\n\tweek_start_date = min(date),\n\t\tweek_end_date = max(date)) ~> AggregateDimDate\nSelectReqFields, CountrySource lookup(country_code == country_code_2_digit,\n\tmultiple: false,\n\tpickup: 'any',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> LookupCountry\nLookupCountry select(mapColumn(\n\t\tcountry = SelectReqFields@country,\n\t\tcc_2_digit = country_code_2_digit,\n\t\tcc_3_digit = country_code_3_digit,\n\t\tyear_week,\n\t\tnew_cases,\n\t\ttests_done,\n\t\tpopulation = SelectReqFields@population,\n\t\ttesting_rate,\n\t\tpositivity_rate,\n\t\ttesting_data_source\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFieldsFrmLookUp\nSelectReqFieldsFrmLookUp, AggregateDimDate join(year_week == ecdc_year_week,\n\tjoinType:'inner',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> JoinWithDate\nJoinWithDate select(mapColumn(\n\t\tcountry,\n\t\tcc_2_digit,\n\t\tcc_3_digit,\n\t\tyear_week,\n\t\tweek_start_date,\n\t\tweek_end_date,\n\t\tnew_cases,\n\t\ttests_done,\n\t\tpopulation,\n\t\ttesting_rate,\n\t\tpositivity_rate,\n\t\ttesting_data_source\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectReqFieldsFromJoin\nSelectReqFieldsFromJoin sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcountry as string,\n\t\tcountry_code_2_digit as string,\n\t\tcountry_code_3_digit as string,\n\t\tpopulation as string,\n\t\t{confirmed cases_count} as string,\n\t\tdeaths_count as string,\n\t\treported_date as string,\n\t\tsource as string\n\t),\n\tpartitionFileNames:['testing.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> TestingSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_cases_deaths')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_cases_deaths",
						"description": "This data flow will transform cases and deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_cases_deaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesAndDeathSources": {},
									"SelectCountry": {},
									"CasesAndDeathsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_cases_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_hospital_admissions",
						"description": "Transforms and creates hospital admissions data and stores in weekly and daily based files.",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_hospital_admissions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalAdmissionSource": {},
									"CountrySource": {},
									"DimDateSource": {},
									"WeeklySink": {},
									"DailySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_hospital_admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_testing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Process the testing files",
				"activities": [
					{
						"name": "df_transform_testing",
						"description": "Pipeline to execute dataflow to transform testing data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_testing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TestingSource": {},
									"CountrySource": {},
									"DimDateSource": {},
									"TestingSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_testing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Ingests ECDC Data",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_cdc_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-12-26T23:15:00",
						"endTime": "2021-12-29T00:01:28",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_start_copy_process')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Trigger to start the copy process as soon as input file is available.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_population_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/population_by_age.tsv.gz",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_start_copy_process_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_ingest_population_data')]"
			]
		}
	]
}